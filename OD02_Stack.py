class Stack:
    def __init__(self):
        # Инициализация пустого списка для хранения элементов стека.
        self.items = []

    def push(self, item):
        """
        Добавить элемент в стек.
        Элемент добавляется в конец списка, что соответствует вершине стека.
        """
        self.items.append(item)

    def pop(self):
        """
        Удалить и вернуть верхний элемент стека.
        Если стек пуст, возвращается None.
        Метод pop() списка удаляет последний элемент, что соответствует
        принципу LIFO (Last In — First Out: последним вошёл — первым вышел).
        """
        if not self.is_empty():
            return self.items.pop()
        return None  # Если стек пуст — нечего удалять

    def peek(self):
        """
        Вернуть верхний элемент стека без удаления.
        Полезно, когда нужно посмотреть, что наверху, не нарушая структуру.
        """
        if not self.is_empty():
            return self.items[-1]  # Последний элемент списка — верх стека
        return None  # Если стек пуст — нечего смотреть

    def is_empty(self):
        """
        Проверить, пуст ли стек.
        Возвращает True, если стек не содержит ни одного элемента.
        """
        return len(self.items) == 0

    def size(self):
        """
        Вернуть количество элементов в стеке.
        Это может быть полезно, например, для отображения статистики или контроля переполнения.
        """
        return len(self.items)


# Создаём новый пустой стек
s = Stack()

# Добавляем два элемента: 10 и 20
s.push(10)
s.push(20)

# Удаляем и возвращаем верхний элемент (20, так как он был добавлен последним)
print(s.pop())      # Вывод: 20

# Смотрим, какой элемент теперь наверху (это 10)
print(s.peek())     # Вывод: 10

# Проверяем, пуст ли стек (нет, там есть элемент 10)
print(s.is_empty()) # Вывод: False