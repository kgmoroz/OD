from collections import deque  # deque — двусторонняя очередь, быстрая для операций в начале и конце

class Queue:
    def __init__(self):
        # Используем deque вместо обычного списка — он работает быстрее при удалении элементов с начала очереди
        self.items = deque()

    def enqueue(self, item):
        """
        Добавить элемент в конец очереди.
        Операция соответствует принципу FIFO (First In — First Out).
        Новый элемент всегда становится последним.
        """
        self.items.append(item)  # Добавление в конец — O(1)

    def dequeue(self):
        """
        Удалить и вернуть первый элемент очереди.
        Если очередь пуста, возвращается None.
        Удаление происходит с начала — самый "старый" элемент уходит первым.
        """
        if not self.is_empty():
            return self.items.popleft()  # Удаление с начала — O(1) благодаря deque
        return None  # Если очередь пуста — вернуть None

    def peek(self):
        """
        Посмотреть на первый элемент очереди, не удаляя его.
        Это позволяет узнать, кто следующий в очереди.
        """
        if not self.is_empty():
            return self.items[0]  # Первый элемент находится в начале deque
        return None  # Очередь пуста — нечего показывать

    def is_empty(self):
        """
        Проверить, пуста ли очередь.
        True — если нет ни одного элемента.
        """
        return len(self.items) == 0

    def size(self):
        """
        Вернуть количество элементов в очереди.
        Может использоваться для мониторинга нагрузки или отладки.
        """
        return len(self.items)

# -----------------------------
# Пример использования очереди:
# -----------------------------

q = Queue()           # Создаём новую очередь

q.enqueue("A")        # Добавляем элемент 'A' в очередь
q.enqueue("B")        # Добавляем элемент 'B' в очередь
                      # Сейчас очередь выглядит как: ['A', 'B']

print(q.dequeue())    # Удаляем и печатаем первый элемент — 'A'
                      # Теперь очередь: ['B']

print(q.peek())       # Смотрим, кто теперь первый — 'B' (не удаляется)
print(q.is_empty())   # Проверяем, пуста ли очередь — False (там 'B')